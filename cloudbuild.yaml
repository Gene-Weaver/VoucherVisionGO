# cloudbuild.yaml
options:
  logging: GCS_ONLY
  env:
    - DOCKER_BUILDKIT=1

steps:
  # 1) Detect dependency/submodule changes (robust to first build)
  - name: gcr.io/cloud-builders/git
    id: check-changes
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        git fetch --unshallow || true
        if git rev-parse HEAD~1 >/dev/null 2>&1; then
          RANGE="HEAD~1..HEAD"
        else
          echo "true" > /workspace/_deps_changed.txt
          echo "Critical dependencies changed: first build"
          exit 0
        fi

        DEPS_CHANGED=false
        # Docker/system/python deps
        if git diff --name-only "$RANGE" | grep -qE '^(requirements\.txt|constraints\.txt|Dockerfile|entrypoint\.sh)$'; then
          DEPS_CHANGED=true
        fi
        # Submodules / vendor trees (pointer changes)
        if git diff --name-only "$RANGE" -- TextCollage vouchervision_main | grep -q .; then
          DEPS_CHANGED=true
        fi

        echo "$DEPS_CHANGED" > /workspace/_deps_changed.txt
        echo "Critical dependencies changed: $DEPS_CHANGED"

  # 2) Shallow init submodules for speed
  - name: gcr.io/cloud-builders/git
    id: update-submodules
    entrypoint: bash
    args:
      - -lc
      - |
        git submodule init
        git submodule update --recursive --depth 1 --recommend-shallow

  - name: gcr.io/cloud-builders/git
    id: verify-submodules
    entrypoint: bash
    args:
      - -lc
      - |
        echo "Verifying submodule contents..."
        ls -la TextCollage/ || echo "TextCollage not found"
        ls -la TextCollage/models/ || echo "models not found"
        ls -la TextCollage/models/openvino/ || echo "openvino not found"

  # 3) Buildx setup (enables cache-to/from registry)
  - name: gcr.io/cloud-builders/docker
    id: setup-buildx
    entrypoint: bash
    args:
      - -lc
      - |
        docker buildx create --name vv-builder --use || docker buildx use vv-builder
        docker buildx inspect --bootstrap

  # 4) Build with persistent cache. Full rebuild only when deps changed.
  - name: gcr.io/cloud-builders/docker
    id: build
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        _DEPS_CHANGED="$(cat /workspace/_deps_changed.txt)"
        CACHE_REF="us-central1-docker.pkg.dev/${PROJECT_ID}/cache/vv:buildcache"
        IMAGE="us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go"
        TAG_SHA="${IMAGE}:${COMMIT_SHA}"
        TAG_LATEST="${IMAGE}:latest"

        if [ "$_DEPS_CHANGED" = "true" ]; then
          echo "Full rebuild (deps/submodules changed)"
          # no-cache forces layers to be re-evaluated; cache-to repopulates registry cache afterwards
          docker buildx build \
            --load \
            --no-cache \
            --cache-to=type=registry,ref=${CACHE_REF},mode=max \
            -t "${TAG_SHA}" -t "${TAG_LATEST}" .
        else
          echo "Fast rebuild (code-only changes) using registry cache"
          docker buildx build \
            --load \
            --cache-from=type=registry,ref=${CACHE_REF} \
            --cache-to=type=registry,ref=${CACHE_REF},mode=max \
            -t "${TAG_SHA}" -t "${TAG_LATEST}" .
        fi

  # 5) Push the images
  - name: gcr.io/cloud-builders/docker
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}']

  - name: gcr.io/cloud-builders/docker
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest']

  # 6) Deploy to Cloud Run
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: gcloud
    args:
      - run
      - deploy
      - vouchervision-go
      - --image
      - us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}
      - --region
      - us-central1
      - --platform
      - managed
      - --allow-unauthenticated

images:
  - us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}
  - us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest

serviceAccount: projects/${PROJECT_ID}/serviceAccounts/${_SERVICE_ACCOUNT_EMAIL}
logsBucket: gs://${_BUCKET}

substitutions:
  _API_KEY: ''
  _SERVICE_ACCOUNT_EMAIL: ''
  _BUCKET: ''
