steps:
  # Step 1: Check if we need to rebuild dependencies
  - name: 'gcr.io/cloud-builders/gcloud'
    id: check-rebuild
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -n "$(git diff --name-only $COMMIT_SHA~1 $COMMIT_SHA | grep -E 'requirements.txt|Dockerfile|entrypoint.sh')" ]; then
          echo "REBUILD_REQUIRED=true" > /workspace/rebuild.env
        else
          echo "REBUILD_REQUIRED=false" > /workspace/rebuild.env
        fi
        cat /workspace/rebuild.env

  # Step 2a: Build the container image from scratch if dependencies changed
  - name: 'gcr.io/cloud-builders/docker'
    id: full-rebuild
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/rebuild.env
        if [ "$REBUILD_REQUIRED" = "true" ]; then
          echo "Rebuilding container from scratch..."
          docker build --no-cache -t us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA} .
        else
          echo "Skipping full rebuild"
        fi

  # Step 2b: Use previous image as cache and just update code if only code changed
  - name: 'gcr.io/cloud-builders/docker'
    id: incremental-rebuild
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/rebuild.env
        if [ "$REBUILD_REQUIRED" = "false" ]; then
          echo "Performing incremental build..."
          # Pull the latest image to use as cache
          docker pull us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest || true
          # Build using the cache
          docker build --cache-from us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest -t us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA} .
        else
          echo "Skipping incremental rebuild"
        fi

  # Step 3: Push the container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}']

  # Step 4: Tag the image as latest
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest']
  
  # Step 5: Push the latest tag
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest']

  # Step 6: Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'vouchervision-go'
      - '--image'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'

# Store images in Artifact Registry
images:
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}'
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest'

# Service account and logging configuration
serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/${_SERVICE_ACCOUNT_EMAIL}'
logsBucket: 'gs://${_BUCKET}'
options:
  logging: GCS_ONLY

# Define substitution variables
substitutions:
  _API_KEY: '' # Will be provided during deployment
  _SERVICE_ACCOUNT_EMAIL: '' # Service account email
  _BUCKET: '' # Logs bucket name