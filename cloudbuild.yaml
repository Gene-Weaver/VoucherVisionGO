steps:
  # Step 1: Check ONLY for dependency changes.
  - name: 'gcr.io/cloud-builders/git'
    id: check-changes
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Ensure we have git history for the diff
        git fetch --unshallow || echo "Repo is not shallow."
        # Default to a fast build
        _DEPS_CHANGED="false"
        # Check if critical dependency files changed since the last commit
        if git diff --name-only HEAD~1 HEAD | grep -q -E '^(requirements\.txt|Dockerfile|entrypoint\.sh)$'; then
          _DEPS_CHANGED="true"
        fi
        # Write the decision to a file for the build step
        echo "$_DEPS_CHANGED" > /workspace/_deps_changed.txt
        echo "Critical dependencies changed: $_DEPS_CHANGED"

  # Step 2: Ensure submodules are fully initialized and updated in the workspace.
  # This is crucial so the COPY command in the Dockerfile gets the right files.
  - name: 'gcr.io/cloud-builders/git'
    id: update-submodules
    args: ['submodule', 'update', '--init', '--recursive']

  - name: 'gcr.io/cloud-builders/git'
    id: verify-submodules
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Verifying submodule contents..."
        ls -la TextCollage/ || echo "TextCollage not found"
        ls -la TextCollage/models/ || echo "models not found"
        ls -la TextCollage/models/openvino/ || echo "openvino not found"

  # Step 3: Build the Docker image using the caching strategy from Step 1.
  - name: 'gcr.io/cloud-builders/docker'
    id: build
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        _DEPS_CHANGED=$(cat /workspace/_deps_changed.txt)
        if [ "$_DEPS_CHANGED" = "true" ]; then
          echo "Rebuilding container from scratch due to dependency change..."
          docker build --no-cache -t us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA} .
        else
          echo "Performing incremental build with cache..."
          docker pull us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest || true
          docker build --cache-from us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest -t us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA} .
        fi

  # Step 4: Push the container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}']

  # Step 5: Tag the image as latest
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest']
  
  # Step 6: Push the latest tag
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest']

  # Step 7: Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'vouchervision-go'
      - '--image'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'

# Store images in Artifact Registry
images:
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:${COMMIT_SHA}'
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/vouchervisiongo/vouchervision-go:latest'

# Service account and logging configuration
serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/${_SERVICE_ACCOUNT_EMAIL}'
logsBucket: 'gs://${_BUCKET}'
options:
  logging: GCS_ONLY

# Define substitution variables
substitutions:
  _API_KEY: '' # Will be provided during deployment
  _SERVICE_ACCOUNT_EMAIL: '' # Service account email
  _BUCKET: '' # Logs bucket name